"use client";

import { useState, useEffect } from 'react';
import { useAuth } from '@/lib/auth';
import { db } from '@/lib/firebase';
import { collection, query, orderBy, onSnapshot, limit } from 'firebase/firestore';
import CreatePostModal from '@/components/posts/CreatePostModal';
import Post from '@/components/posts/Post';
import Image from 'next/image';
import { Pencil } from 'lucide-react';
import CreatePost from '@/components/features/CreatePost';
import PostFeed from '@/components/features/PostFeed';

import PinnedBusinesses from '@/components/features/PinnedBusinesses';
import NationwidePosts from '@/components/features/NationwidePosts';
import ValueProposition from '@/components/features/ValueProposition';
import LoadingSpinner from '@/components/shared/LoadingSpinner';
import Link from 'next/link';
import { Building } from 'lucide-react';

export default function Home() {
  const [isCreatePostOpen, setIsCreatePostOpen] = useState(false);
  const [posts, setPosts] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const { user, userProfile, error } = useAuth();

  useEffect(() => {
    // Fetch posts from Firestore
    const fetchPosts = () => {
      try {
        const q = query(
          collection(db, 'posts'),
          orderBy('createdAt', 'desc'),
          limit(10)
        );

        const unsubscribe = onSnapshot(q, (snapshot) => {
          const fetchedPosts = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
          }));
          setPosts(fetchedPosts);
          setLoading(false);
        });

        return unsubscribe;
      } catch (error) {
        console.error('Error fetching posts:', error);
        setLoading(false);
        return () => {};
      }
    };

    const unsubscribe = fetchPosts();
    return () => unsubscribe();
  }, []);

  console.log('[HomePage] Rendering with auth state:', { 
    isAuthenticated: !!user, 
    loading, 
    hasError: !!error,
    userId: user?.uid
  });

  // Show loading state while authentication is being checked
  if (loading) {
    return (
      <div className="max-w-[1440px] mx-auto px-4 py-6">
        <div className="flex justify-center items-center h-64">
          <LoadingSpinner size="lg" text="Loading..." />
        </div>
      </div>
    );
  }

  // Show error state if there's an authentication error
  if (error) {
    return (
      <div className="max-w-[1440px] mx-auto px-4 py-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-red-700">
          <h2 className="text-lg font-bold mb-2">Error</h2>
          <p>{error}</p>
          <button 
            onClick={() => window.location.reload()} 
            className="mt-4 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-[1440px] mx-auto px-4 py-6">
      {/* Debug info - only visible in development */}
      {process.env.NODE_ENV === 'development' && (
        <div className="mb-4 p-2 bg-yellow-50 border border-yellow-200 rounded text-sm">
          <p><strong>Debug:</strong> {user ? `Authenticated as ${user.email}` : 'Not authenticated'}</p>
          <Link href="/test-auth" className="text-blue-600 hover:underline">View Auth Test Page</Link>
        </div>
      )}
      
      {/* Value Proposition Section - Shown to all users at the top */}
      <ValueProposition />

      <div className="flex flex-col lg:flex-row gap-6">
        {/* Main content - Feed */}
        <div className="w-full lg:w-[60%]">
          {user && (
            <>
              {/* Modern Create Post Card */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 mb-6">
                <div className="flex items-center space-x-4">
                  <div className="w-10 h-10 bg-gray-200 rounded-full overflow-hidden">
                    {userProfile?.photoURL ? (
                      <Image
                        src={userProfile.photoURL}
                        alt="Profile"
                        width={40}
                        height={40}
                        className="object-cover w-full h-full"
                      />
                    ) : null}
                  </div>
                  <button
                    onClick={() => setIsCreatePostOpen(true)}
                    className="flex-1 text-left px-4 py-2 bg-gray-50 rounded-full text-gray-500 hover:bg-gray-100"
                  >
                    What's on your mind?
                  </button>
                  <button
                    onClick={() => setIsCreatePostOpen(true)}
                    className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-50 rounded-full"
                  >
                    <Pencil size={20} />
                  </button>
                </div>
              </div>
              
              {/* Original CreatePost Component */}
              <CreatePost />
              
              <div className="mt-6">
                <h2 className="text-xl font-bold mb-4">My Posts</h2>
                <PostFeed type="personal" />
              </div>
              
              <div className="mt-8">
                <h2 className="text-xl font-bold mb-4">Community Feed</h2>
                {/* New Posts Component */}
                {posts.length > 0 && (
                  <div className="space-y-6 mb-6">
                    {posts.map((post) => (
                      <Post 
                        key={post.id} 
                        id={post.id}
                        content={post.content}
                        authorName={post.authorName}
                        authorImage={post.authorImage || '/default-avatar.png'}
                        location={post.location}
                        mediaUrls={post.mediaUrls || []}
                        likes={post.likes || 0}
                        comments={post.comments || 0}
                        shares={post.shares || 0}
                        createdAt={post.createdAt}
                        hasLiked={false}
                      />
                    ))}
                  </div>
                )}
                <PostFeed type="community" />
              </div>
            </>
          )}
        </div>
        
        {/* Right sidebar */}
        <div className="w-full lg:w-[40%] space-y-6">
          
          <PinnedBusinesses />
          <NationwidePosts />
          <div className="mb-8 p-6 bg-white rounded-xl shadow-sm">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold">Business Directory</h2>
              <Link href="/directory" className="text-sm font-medium text-green-600 hover:text-green-800">
                View all
              </Link>
            </div>
            
            <p className="text-gray-600 mb-4">
              Discover local businesses and services in your community.
            </p>
            
            <Link
              href="/directory"
              className="flex items-center justify-center w-full bg-[#00FF4C] hover:bg-green-400 text-black font-medium py-3 px-4 rounded-md"
            >
              <Building className="mr-2 h-5 w-5" />
              Browse Business Directory
            </Link>
          </div>
        </div>
      </div>

      {/* Create Post Modal */}
      <CreatePostModal
        isOpen={isCreatePostOpen}
        onClose={() => setIsCreatePostOpen(false)}
      />
    </div>
  );
}
